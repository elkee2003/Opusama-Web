type Notification @model @auth(rules: [{allow: public}]) {
  id: ID!
  creatorID: String
  recipientID: String
  recipientType: String
  type: String
  entityID: String
  message: String
  read: Boolean
}

type CommunityLike @model @auth(rules: [{allow: public}]) {
  id: ID!
  like: Boolean
  likedByID: String
  communitydiscussionID: ID! @index(name: "byCommunityDiscussion")
}

type CommunityReply @model @auth(rules: [{allow: public}]) {
  id: ID!
  comment: String
  media: [String]
  commenterID: String
  communitydiscussionID: ID! @index(name: "byCommunityDiscussion")
}

type CommunityDiscussion @model @auth(rules: [{allow: public}]) {
  id: ID!
  category: String
  title: String
  content: String
  instigatorID: String
  media: [String]
  CommunityReplies: [CommunityReply] @hasMany(indexName: "byCommunityDiscussion", fields: ["id"])
  CommunityLikes: [CommunityLike] @hasMany(indexName: "byCommunityDiscussion", fields: ["id"])
}

enum BookingStatus {
  PENDING
  ACCEPTED
  VIEWING
  CHECKED_IN
  VISITING
  VIEWED
  CHECKED_OUT
  VISITED
  SOLD
  PAID
  DELAYED_PAYMENT
  RECEIVED
  DENIED
  OCCUPIED
  REMOVED_CLIENT
  REMOVED_REALTOR
  REMOVED_REALTOR_PAYMENT_DELAYED
}

type PostComment @model @auth(rules: [{allow: public}]) {
  id: ID!
  comment: String
  commenterID: String
  realtorID: String
  postID: ID! @index(name: "byPost")
}

type PostLike @model @auth(rules: [{allow: public}]) {
  id: ID!
  like: Boolean
  likedByID: String
  postID: ID! @index(name: "byPost")
}

type RealtorReview @model @auth(rules: [{allow: public}]) {
  id: ID!
  rating: Float
  review: String
  realtorID: ID! @index(name: "byRealtor")
  userID: ID! @index(name: "byUser")
}

type PostReview @model @auth(rules: [{allow: public}]) {
  id: ID!
  rating: Float
  review: String
  realtorID: String
  postID: ID! @index(name: "byPost")
  userID: ID! @index(name: "byUser")
}

type Booking @model @auth(rules: [{allow: public}]) {
  id: ID!
  adults: String
  kids: String
  infants: String
  numberOfPeople: String
  clientFirstName: String
  clientLastName: String
  clientPhoneNumber: String
  purpose: String
  duration: String
  checkInDate: String
  checkOutDate: String
  propertyType: String
  accommodationType: String
  nameOfType: String
  totalPrice: Float
  realtorPrice: Float
  bookingLat: Float
  bookingLng: Float
  status: BookingStatus
  userID: ID! @index(name: "byUser")
  transactionReference: String
  transactionStatus: String
  realtorID: ID! @index(name: "byRealtor")
  PostID: String
  ticketID: String
  qrCodeUrl: String
  ticketStatus: String
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  sub: String!
  firstName: String!
  lastName: String
  username: String
  profilePic: String
  phoneNumber: String
  PostReviews: [PostReview] @hasMany(indexName: "byUser", fields: ["id"])
  RealtorReviews: [RealtorReview] @hasMany(indexName: "byUser", fields: ["id"])
  address: String
  Bookings: [Booking] @hasMany(indexName: "byUser", fields: ["id"])
  push_token: String
}

type Realtor @model @auth(rules: [{allow: public}]) {
  id: ID!
  sub: String!
  firstName: String
  lastName: String
  username: String
  myDescription: String
  profilePic: String
  email: String
  address: String
  phoneNumber: String
  bankName: String
  Post: [Post] @hasMany(indexName: "byRealtor", fields: ["id"])
  bankCode: String
  Bookings: [Booking] @hasMany(indexName: "byRealtor", fields: ["id"])
  RealtorReview: [RealtorReview] @hasMany(indexName: "byRealtor", fields: ["id"])
  accountName: String
  accountNumber: String
  push_token: String
  isVerified: Boolean
  isPartner: Boolean
  isPremium: Boolean
  isElite: Boolean
  isTrusted: Boolean
}

type Post @model @auth(rules: [{allow: public}]) {
  id: ID!
  propertyType: String!
  type: String!
  nameOfType: String
  packageType: String
  availableDocs: String
  accommodationParts: String
  media: [String]
  description: String!
  eventDateTime: String
  capacity: String
  dressCode: String
  available: Boolean
  address: String
  fullAddress: String
  generalLocation: String
  lat: Float
  lng: Float
  price: Float!
  PostReviews: [PostReview] @hasMany(indexName: "byPost", fields: ["id"])
  cautionFee: Float
  totalPrice: Float!
  inspectionFee: Float
  otherFeesName: String
  otherFeesPrice: Float
  otherFeesName2: String
  otherFeesPrice2: Float
  vendorCommissionAmount: Float
  vendorCommissionBreakdown: AWSJSON
  clientServiceFee: Float
  timeFrame: String
  bed: String
  bedrooms: String
  PostComments: [PostComment] @hasMany(indexName: "byPost", fields: ["id"])
  amenities: String
  policies: String
  country: String!
  state: String
  city: String
  isApproved: Boolean
  realtorID: ID! @index(name: "byRealtor")
  PostLikes: [PostLike] @hasMany(indexName: "byPost", fields: ["id"])
}
 